diff -rub libcore_orig/clone.rs libcore/clone.rs
--- libcore_orig/clone.rs	2017-05-22 11:32:22.423204355 +0800
+++ libcore/clone.rs	2017-05-22 11:25:26.224467866 +0800
@@ -162,7 +162,9 @@
 clone_impl! { u64 }
 clone_impl! { u128 }
 
+#[cfg(not(disable_float))]
 clone_impl! { f32 }
+#[cfg(not(disable_float))]
 clone_impl! { f64 }
 
 clone_impl! { () }
diff -rub libcore_orig/default.rs libcore/default.rs
--- libcore_orig/default.rs	2017-05-22 11:32:22.651162775 +0800
+++ libcore/default.rs	2017-05-22 11:25:26.224467866 +0800
@@ -153,5 +153,7 @@
 default_impl! { i64, 0 }
 default_impl! { i128, 0 }
 
+#[cfg(not(disable_float))]
 default_impl! { f32, 0.0f32 }
+#[cfg(not(disable_float))]
 default_impl! { f64, 0.0f64 }
diff -rub libcore_orig/fmt/mod.rs libcore/fmt/mod.rs
--- libcore_orig/fmt/mod.rs	2017-05-22 11:32:22.387210920 +0800
+++ libcore/fmt/mod.rs	2017-05-22 11:25:26.224467866 +0800
@@ -15,12 +15,14 @@
 use cell::{UnsafeCell, Cell, RefCell, Ref, RefMut};
 use marker::PhantomData;
 use mem;
+#[cfg(not(disable_float))]
 use num::flt2dec;
 use ops::Deref;
 use result;
 use slice;
 use str;
 
+#[cfg(not(disable_float))]
 mod float;
 mod num;
 mod builders;
@@ -1172,6 +1174,7 @@
     /// Takes the formatted parts and applies the padding.
     /// Assumes that the caller already has rendered the parts with required precision,
     /// so that `self.precision` can be ignored.
+    #[cfg(not(disable_float))]
     fn pad_formatted_parts(&mut self, formatted: &flt2dec::Formatted) -> Result {
         if let Some(mut width) = self.width {
             // for the sign-aware zero padding, we render the sign first and
@@ -1211,6 +1214,7 @@
         }
     }
 
+    #[cfg(not(disable_float))]
     fn write_formatted_parts(&mut self, formatted: &flt2dec::Formatted) -> Result {
         fn write_bytes(buf: &mut Write, s: &[u8]) -> Result {
             buf.write_str(unsafe { str::from_utf8_unchecked(s) })
diff -rub libcore_orig/intrinsics.rs libcore/intrinsics.rs
--- libcore_orig/intrinsics.rs	2017-05-22 11:32:22.579175906 +0800
+++ libcore/intrinsics.rs	2017-05-22 11:25:26.224467866 +0800
@@ -1033,7 +1033,10 @@
     /// The stabilized version of this intrinsic is
     /// [`std::ptr::write_volatile`](../../std/ptr/fn.write_volatile.html).
     pub fn volatile_store<T>(dst: *mut T, val: T);
+}
 
+#[cfg(not(disable_float))]
+extern "rust-intrinsic" {
     /// Returns the square root of an `f32`
     pub fn sqrtf32(x: f32) -> f32;
     /// Returns the square root of an `f64`
@@ -1150,8 +1153,9 @@
     /// Float remainder that allows optimizations based on algebraic rules.
     /// May assume inputs are finite.
     pub fn frem_fast<T>(a: T, b: T) -> T;
+}
 
-
+extern "rust-intrinsic" {
     /// Returns the number of bits set in an integer type `T`
     pub fn ctpop<T>(x: T) -> T;
 
diff -rub libcore_orig/iter/traits.rs libcore/iter/traits.rs
--- libcore_orig/iter/traits.rs	2017-05-22 11:32:22.631166422 +0800
+++ libcore/iter/traits.rs	2017-05-22 11:31:12.624716290 +0800
@@ -700,6 +700,7 @@
     );
 }
 
+#[cfg(not(disable_float))]
 macro_rules! float_sum_product {
     ($($a:ident)*) => ($(
         #[stable(feature = "iter_arith_traits", since = "1.12.0")]
@@ -733,6 +734,7 @@
 }
 
 integer_sum_product! { i8 i16 i32 i64 isize u8 u16 u32 u64 usize }
+#[cfg(not(disable_float))]
 float_sum_product! { f32 f64 }
 
 /// An iterator adapter that produces output as long as the underlying
Only in libcore/iter: .traits.rs.swp
diff -rub libcore_orig/lib.rs libcore/lib.rs
--- libcore_orig/lib.rs	2017-05-22 11:32:22.315224051 +0800
+++ libcore/lib.rs	2017-05-22 11:25:26.228468393 +0800
@@ -126,7 +126,9 @@
 #[path = "num/u64.rs"]   pub mod u64;
 #[path = "num/u128.rs"]   pub mod u128;
 
+#[cfg(not(disable_float))]
 #[path = "num/f32.rs"]   pub mod f32;
+#[cfg(not(disable_float))]
 #[path = "num/f64.rs"]   pub mod f64;
 
 #[macro_use]
Only in libcore/num: float_macros.rs
diff -rub libcore_orig/num/flt2dec/decoder.rs libcore/num/flt2dec/decoder.rs
--- libcore_orig/num/flt2dec/decoder.rs	2017-05-22 11:32:22.543182471 +0800
+++ libcore/num/flt2dec/decoder.rs	2017-05-22 11:25:26.228468393 +0800
@@ -10,6 +10,7 @@
 
 //! Decodes a floating-point value into individual parts and error ranges.
 
+#[cfg(not(disable_float))]
 use {f32, f64};
 use num::FpCategory;
 use num::dec2flt::rawfp::RawFloat;
@@ -56,10 +57,12 @@
     fn min_pos_norm_value() -> Self;
 }
 
+#[cfg(not(disable_float))]
 impl DecodableFloat for f32 {
     fn min_pos_norm_value() -> Self { f32::MIN_POSITIVE }
 }
 
+#[cfg(not(disable_float))]
 impl DecodableFloat for f64 {
     fn min_pos_norm_value() -> Self { f64::MIN_POSITIVE }
 }
Only in libcore/num/flt2dec: decoder.rs.orig
diff -rub libcore_orig/num/mod.rs libcore/num/mod.rs
--- libcore_orig/num/mod.rs	2017-05-22 11:32:22.371213838 +0800
+++ libcore/num/mod.rs	2017-05-22 11:25:26.228468393 +0800
@@ -91,7 +91,9 @@
 mod wrapping;
 
 // All these modules are technically private and only exposed for coretests:
+#[cfg(not(disable_float))]
 pub mod flt2dec;
+#[cfg(not(disable_float))]
 pub mod dec2flt;
 pub mod bignum;
 pub mod diy_float;
@@ -2373,6 +2375,7 @@
 #[unstable(feature = "core_float",
            reason = "stable interface is via `impl f{32,64}` in later crates",
            issue = "32110")]
+#[cfg(not(disable_float))]
 pub trait Float: Sized {
     /// Returns `true` if this value is NaN and false otherwise.
     #[stable(feature = "core", since = "1.6.0")]
@@ -2676,6 +2679,7 @@
 }
 
 #[stable(feature = "rust1", since = "1.0.0")]
+#[cfg(not(disable_float))]
 pub use num::dec2flt::ParseFloatError;
 
 // Conversion traits for primitive integer and float types
@@ -2735,6 +2739,9 @@
 // they fit in the significand, which is 24 bits in f32 and 53 bits in f64.
 // Lossy float conversions are not implemented at this time.
 
+#[cfg(not(disable_float))]
+mod _int_flot_conv {
+use convert::From;
 // Signed -> Float
 impl_from! { i8, f32, #[stable(feature = "lossless_float_conv", since = "1.6.0")] }
 impl_from! { i8, f64, #[stable(feature = "lossless_float_conv", since = "1.6.0")] }
@@ -2751,3 +2758,4 @@
 
 // Float -> Float
 impl_from! { f32, f64, #[stable(feature = "lossless_float_conv", since = "1.6.0")] }
+}
Only in libcore/num: mod.rs.rej
Only in libcore/num: .ops.rs.swp
diff -rub libcore_orig/ops.rs libcore/ops.rs
--- libcore_orig/ops.rs	2017-05-22 11:32:22.623167882 +0800
+++ libcore/ops.rs	2017-05-22 11:29:16.349321867 +0800
@@ -304,7 +304,9 @@
     )*)
 }
 
-add_impl! { usize u8 u16 u32 u64 u128 isize i8 i16 i32 i64 i128 f32 f64 }
+add_impl! { usize u8 u16 u32 u64 u128 isize i8 i16 i32 i64 i128 }
+#[cfg(not(disable_float))]
+add_impl! { f32 f64 }
 
 /// The subtraction operator `-`.
 ///
@@ -378,7 +380,9 @@
     )*)
 }
 
-sub_impl! { usize u8 u16 u32 u64 u128 isize i8 i16 i32 i64 i128 f32 f64 }
+sub_impl! { usize u8 u16 u32 u64 u128 isize i8 i16 i32 i64 i128 }
+#[cfg(not(disable_float))]
+sub_impl! { f32 f64 }
 
 /// The multiplication operator `*`.
 ///
@@ -501,7 +505,9 @@
     )*)
 }
 
-mul_impl! { usize u8 u16 u32 u64 u128 isize i8 i16 i32 i64 i128 f32 f64 }
+mul_impl! { usize u8 u16 u32 u64 u128 isize i8 i16 i32 i64 i128 }
+#[cfg(not(disable_float))]
+mul_impl! { f32 f64 }
 
 /// The division operator `/`.
 ///
@@ -633,6 +639,7 @@
 
 div_impl_integer! { usize u8 u16 u32 u64 u128 isize i8 i16 i32 i64 i128 }
 
+#[cfg(not(disable_float))]
 macro_rules! div_impl_float {
     ($($t:ty)*) => ($(
         #[stable(feature = "rust1", since = "1.0.0")]
@@ -647,6 +654,7 @@
     )*)
 }
 
+#[cfg(not(disable_float))]
 div_impl_float! { f32 f64 }
 
 /// The remainder operator `%`.
@@ -714,6 +722,7 @@
 rem_impl_integer! { usize u8 u16 u32 u64 u128 isize i8 i16 i32 i64 i128 }
 
 
+#[cfg(not(disable_float))]
 macro_rules! rem_impl_float {
     ($($t:ty)*) => ($(
         #[stable(feature = "rust1", since = "1.0.0")]
@@ -728,6 +737,7 @@
     )*)
 }
 
+#[cfg(not(disable_float))]
 rem_impl_float! { f32 f64 }
 
 /// The unary negation operator `-`.
@@ -808,7 +818,9 @@
 }
 
 // neg_impl_unsigned! { usize u8 u16 u32 u64 }
-neg_impl_numeric! { isize i8 i16 i32 i64 i128 f32 f64 }
+neg_impl_numeric! { isize i8 i16 i32 i64 i128 }
+#[cfg(not(disable_float))]
+neg_impl_numeric! { f32 f64 }
 
 /// The unary logical negation operator `!`.
 ///
@@ -1386,7 +1398,9 @@
     )+)
 }
 
-add_assign_impl! { usize u8 u16 u32 u64 u128 isize i8 i16 i32 i64 i128 f32 f64 }
+add_assign_impl! { usize u8 u16 u32 u64 u128 isize i8 i16 i32 i64 i128 }
+#[cfg(not(disable_float))]
+add_assign_impl! { f32 f64 }
 
 /// The subtraction assignment operator `-=`.
 ///
@@ -1443,7 +1457,9 @@
     )+)
 }
 
-sub_assign_impl! { usize u8 u16 u32 u64 u128 isize i8 i16 i32 i64 i128 f32 f64 }
+sub_assign_impl! { usize u8 u16 u32 u64 u128 isize i8 i16 i32 i64 i128 }
+#[cfg(not(disable_float))]
+sub_assign_impl! { f32 f64 }
 
 /// The multiplication assignment operator `*=`.
 ///
@@ -1489,7 +1505,9 @@
     )+)
 }
 
-mul_assign_impl! { usize u8 u16 u32 u64 u128 isize i8 i16 i32 i64 i128 f32 f64 }
+mul_assign_impl! { usize u8 u16 u32 u64 u128 isize i8 i16 i32 i64 i128 }
+#[cfg(not(disable_float))]
+mul_assign_impl! { f32 f64 }
 
 /// The division assignment operator `/=`.
 ///
@@ -1534,7 +1552,9 @@
     )+)
 }
 
-div_assign_impl! { usize u8 u16 u32 u64 u128 isize i8 i16 i32 i64 i128 f32 f64 }
+div_assign_impl! { usize u8 u16 u32 u64 u128 isize i8 i16 i32 i64 i128 }
+#[cfg(not(disable_float))]
+div_assign_impl! { f32 f64 }
 
 /// The remainder assignment operator `%=`.
 ///
@@ -1579,7 +1599,9 @@
     )+)
 }
 
-rem_assign_impl! { usize u8 u16 u32 u64 u128 isize i8 i16 i32 i64 i128 f32 f64 }
+rem_assign_impl! { usize u8 u16 u32 u64 u128 isize i8 i16 i32 i64 i128 }
+#[cfg(not(disable_float))]
+rem_assign_impl! { f32 f64 }
 
 /// The bitwise AND assignment operator `&=`.
 ///
Only in libcore/: .ops.rs.swp
